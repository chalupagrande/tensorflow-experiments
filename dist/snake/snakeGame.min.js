class Game{constructor(t,e){this.opts={boardWidth:t,boardHeight:e},this.board=[],this.baitLocation=null;for(let s=0;s<t;s++){let t=[...Array(e)].map(()=>0);this.board.push(t)}snake=new Snake(this.opts),this.addSnake(snake),this.newBait()}set(t,e){this.board[t.x][t.y]=e}get(t){return this.board[t.x][t.y]}addSnake(t){t.positions.forEach(t=>this.set(t,-1))}newBait(){let t,e=-1;for(;-1===e||1===e;){let s=Math.floor(random(this.opts.boardWidth)),o=Math.floor(random(this.opts.boardHeight));t=createVector(s,o),e=this.get(t)}this.baitLocation=t,this.set(t,1)}step(){let{oldPositions:t,newPositions:e}=snake.move(),s=this.updateBoard(t,e,this.baitLocation);return 1===s&&(snake.grow(),this.newBait()),s}updateBoard(t,e,s){try{t.forEach(t=>this.set(t,0)),e.forEach(t=>this.set(t,-1))}catch{return-1}let o=[...e];for(let t=0;t<o.length;t++){let e=o[t];o.splice(t,1);let a=o;for(let t=0;t<a.length;t++){let s=a[t];if(e.equals(s))return-1}return e.x>=this.opts.boardWidth||e.x<0||e.y>=this.opts.boardHeight||e.y<0?-1:e.equals(s)?1:0}}}
//# sourceMappingURL=../maps/snake/snakeGame.min.js.map
