class Game{constructor(t,s,e){this.sketch=t,this.opts={boardWidth:s,boardHeight:e},this.board=[],this.baitLocation=null;for(let t=0;t<s;t++){let t=[...Array(e)].map(()=>0);this.board.push(t)}this.snake=null,this.newBait(),this.score=1}set(t,s){this.board[t.x][t.y]=s}get(t){return this.board[t.x][t.y]}addSnake(t){this.snake=t,this.snake.positions.forEach(t=>this.set(t,-1))}newBait(){let t,s=-1;for(;-1===s||1===s;){let e=Math.floor(this.sketch.random(this.opts.boardWidth)),i=Math.floor(this.sketch.random(this.opts.boardHeight));t=this.sketch.createVector(e,i),s=this.get(t)}this.baitLocation=t,this.set(t,1)}step(){let{oldPositions:t,newPositions:s}=this.snake.move(),e=this.updateBoard(t,s,this.baitLocation);return 1===e&&(this.snake.grow(),this.newBait()),e}updateBoard(t,s,e){try{t.forEach(t=>this.set(t,0)),s.forEach(t=>this.set(t,-1))}catch{return-1}let i=[...s];for(let t=0;t<i.length;t++){let s=i[t];i.splice(t,1);let h=i;for(let t=0;t<h.length;t++){let e=h[t];if(s.equals(e))return-1}return s.x>=this.opts.boardWidth||s.x<0||s.y>=this.opts.boardHeight||s.y<0?-1:s.equals(e)?1:0}}}
//# sourceMappingURL=../maps/snake/game.min.js.map
