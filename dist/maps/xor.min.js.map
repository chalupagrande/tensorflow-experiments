{"version":3,"sources":["xor.js"],"names":["model","inputs","inputsArrayRaw","trainingInputs","tf","tensor","answers","size","resolution","scl","doneTraining","settings","cyclesEl","getModel","sequential","layers","dense","units","activation","inputShape","learningRate","optimizer","train","compile","loss","setup","addSettingInputs","createElement","createCanvas","initialDraw","draw","frameRate","shuffle","then","history","updateStats","toFixed","console","predict","dataSync","i","x","y","drawBoxes","map","prediction","lossEl","html","frameCount","setupModel","dispose","tidy","print","xVal","yVal","push","val","textAlign","translate","fill","stroke","CENTER","rect","strokeWeight","createDiv","reset","createButton","mousePressed","div","id","child","createSelect","actFuncEl","option","target","value","changed","optimizerEl","lossFuncEl","learningRateEl","createSpan","rateSlider","createSlider","createP"],"mappings":"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","file":"../xor.min.js","sourcesContent":["// tensors to set and use in training and predicting\nlet model\nlet inputs\nlet inputsArrayRaw = []\nlet trainingInputs = tf.tensor([[1,0], [0,1], [0,0], [1,1]])\nlet answers = tf.tensor([[1], [1], [0], [0]])\n\n// p5 stuff\nlet size = 400 // canvas size in pixels\nlet resolution = 8 // number of boxes going on x and y\nlet scl = size / resolution\n\n// variables\nlet doneTraining = true // toggles on and off to signal that the training has finished and can rerender\nlet settings = {} // options set by switches\nlet lossEl = null\nlet cyclesEl = null\n\n\nfunction getModel(){\n  const model = tf.sequential({\n    layers: [\n      tf.layers.dense({inputShape: [2], units: 4, activation: settings.activation}),\n      tf.layers.dense({units: 1}),\n    ]\n   });\n\n  const learningRate = settings.learningRate\n  const optimizer = tf.train[settings.optimizer](learningRate);\n\n  model.compile({\n    optimizer: optimizer,\n    loss: tf.losses[settings.loss],\n    metrics: ['accuracy']\n  })\n\n  return model\n}\n\nfunction setup() {\n  addSettingInputs()\n  createElement('h1', 'Grid Visualization')\n  createCanvas(size, size);\n  initialDraw()\n  setupModel()\n}\n\n\nfunction draw() {\n  frameRate(8)\n\n  // noLoop()\n  if(doneTraining) {\n    doneTraining = false\n    model.fit(trainingInputs, answers, {\n      shuffle: true\n    })\n    .then(({history}) => {\n      let loss = history.loss[0]\n      updateStats(loss)\n      if(loss.toFixed(2)*1 === 0) {\n        console.log('DONE')\n        return // dont reset done training\n      }\n      doneTraining = true\n\n      let prediction = model.predict(inputs).dataSync()\n\n      let i = 0\n      for(let x = 0; x < resolution; x++) {\n        for(let y = 0; y < resolution; y++) {\n          // push()\n          // translate(x * scl, y * scl)\n          // fill(map(prediction[i], 0, 1, 0, 255))\n          // stroke(255)\n          // rect(0, 0, scl, scl)\n          // pop()\n          drawBoxes(x,y, map(prediction[i], 0, 1, 0, 255))\n          i++\n        }\n      }\n    })\n  }\n}\n\nfunction updateStats(loss){\n  lossEl.html(`Loss: ${loss}`)\n  cyclesEl.html(`Cycles: ${frameCount}`)\n}\n\n// creates a model and populates the tensors\nfunction setupModel(){\n  doneTraining = true\n  if(model) model.dispose()\n  model = tf.tidy(()=> getModel())\n  inputs = tf.tensor(inputsArrayRaw)\n  inputs.print()\n}\n\nfunction initialDraw(){\n  for(let x = 0; x < resolution; x++) {\n    for(let y = 0; y < resolution; y++) {\n      let {xVal, yVal} = drawBoxes(x,y,100)\n      inputsArrayRaw.push([xVal, yVal])\n    }\n  }\n}\n\nfunction drawBoxes(x,y, val){\n  let xVal = map(x, 0, resolution - 1, 0, 1)\n  let yVal = map(y, 0, resolution - 1, 0, 1)\n  push()\n  translate(x * scl, y * scl)\n  fill(val)\n  stroke(255)\n  rect(0, 0, scl, scl)\n  fill(val > 255/2 ? 0 : 255)\n  strokeWeight(0)\n  textAlign(CENTER)\n  textSize(8)\n  text(`[${xVal.toFixed(1) * 10}, ${yVal.toFixed(1) * 10}]`, scl/2, scl/2)\n  pop()\n  return {xVal, yVal}\n}\n\n\nfunction addSettingInputs(){\n  let div = createDiv(`<h1>Settings</h1>`)\n  div.id = 'settings'\n\n\n  let reset = createButton('reset')\n  reset.mousePressed(setupModel)\n  div.child(reset)\n  div.child(createElement('br'))\n\n  settings.activation = 'relu'\n  let actFuncEl = createSelect()\n  actFuncEl.option('relu');\n  actFuncEl.option('sigmoid');\n  actFuncEl.option('tanh');\n  actFuncEl.option('linear');\n  actFuncEl.option('swish');\n  actFuncEl.option('selu');\n  actFuncEl.changed((val)=> {\n    settings.activation = val.target.value\n  })\n  div.child(createElement('label', 'Activation Function'))\n  div.child(actFuncEl)\n  div.child(createElement('br'))\n\n  settings.optimizer = 'sgd'\n  let optimizerEl = createSelect()\n  optimizerEl.option('sgd');\n  optimizerEl.option('momentum');\n  optimizerEl.option('adagrad');\n  optimizerEl.option('adadelta');\n  optimizerEl.option('adam');\n  optimizerEl.option('adamax');\n  optimizerEl.option('rmsprop');\n  optimizerEl.changed((val)=> {\n    settings.optimizer = val.target.value\n  })\n  div.child(createElement('label', 'Optimizer Function'))\n  div.child(optimizerEl)\n  div.child(createElement('br'))\n\n  settings.loss = 'meanSquaredError'\n  let lossFuncEl = createSelect()\n  lossFuncEl.option('absoluteDifference');\n  lossFuncEl.option('computeWeightedLoss');\n  lossFuncEl.option('cosineDistance');\n  lossFuncEl.option('hingeLoss');\n  lossFuncEl.option('huberLoss');\n  lossFuncEl.option('logLoss');\n  lossFuncEl.option('meanSquaredError');\n  lossFuncEl.option('sigmoidCrossEntropy');\n  lossFuncEl.option('softmaxCrossEntropy');\n  lossFuncEl.changed((val)=> {\n    settings.loss = val.target.value\n  })\n  div.child(createElement('label', 'Loss Function'))\n  div.child(lossFuncEl)\n  div.child(createElement('br'))\n\n\n  settings.learningRate = 0.2\n  let learningRateEl = createSpan(settings.learningRate)\n  let rateSlider = createSlider(0, 1, 0.2, 0.1)\n  rateSlider.changed((val)=> {\n    settings.learningRate = val.target.value\n    learningRateEl.html(val.target.value)\n  })\n  div.child(createElement('label', 'Learning Rate'))\n  div.child(rateSlider)\n  div.child(learningRateEl)\n  div.child(createElement('br'))\n\n  lossEl = createP(`Loss: 1000`)\n  div.child(lossEl)\n  cyclesEl = createP(`Cycles: 0`)\n  div.child(cyclesEl)\n}"]}