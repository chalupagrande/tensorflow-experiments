{"version":3,"sources":["snake2/game.js"],"names":["Game","constructor","ctx","this","board","baitLocation","rows","cols","row","col","Array","map","push","snake","score","gameOver","set","pos","x","y","val","get","addSnake","positions","forEach","newBait","p","curVal","Math","floor","random","step","createVector","think","oldPositions","newPositions","move","status","updateBoard","curPos","bait","prevPos","pre","cur","positionsCopy","i","length","splice","o","rest","other","equals","curPiece","render","scl","elements","sightSize","html","life","noLoop","end","noStroke","start","v","background","p5","Vector","add","headPos","snakePos","fill","rect","pop","applePos"],"mappings":"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","file":"../../snake2/game.min.js","sourcesContent":["class Game {\n  constructor(ctx){\n    this.ctx = ctx\n    this.board = []\n    this.baitLocation = null\n\n    let {rows, cols} = this.ctx\n    // init board\n    for (let row = 0; row < rows; row++) {\n      let col = [...Array(cols)].map(() => 0)\n      this.board.push(col)\n    }\n    this.snake = null\n    this.score = 1\n    this.gameOver = false\n  }\n\n  set(pos, val) {\n    this.board[pos.x][pos.y] = val\n  }\n\n  get(pos) {\n    return this.board[pos.x][pos.y]\n  }\n\n  // adds a snake to the game\n  addSnake(snake) {\n    this.snake = snake\n    this.snake.positions.forEach((pos) => this.set(pos, -1))\n  }\n\n  // looks for a new random place to put the bait\n  newBait() {\n    let {p, rows, cols} = this.ctx\n    let curVal = -1\n    let pos\n    while (curVal === -1 || curVal === 1) {\n      let x = Math.floor(p.random(cols))\n      let y = Math.floor(p.random(rows))\n      pos = p.createVector(x, y)\n      curVal = this.get(pos)\n    }\n    this.baitLocation = pos\n    this.set(pos, 1)\n  }\n\n  step() {\n    this.snake.look(this.board)\n    this.snake.think()\n    let { oldPositions, newPositions } = this.snake.move()\n\n    let status = this.updateBoard(\n      oldPositions,\n      newPositions,\n      this.baitLocation\n    )\n    if (status === 1) {\n      this.snake.grow()\n      this.newBait()\n      this.score += 1\n    } else if(status === -1){\n      this.gameOver = true\n    }\n    return status\n  }\n\n  updateBoard(prevPos, curPos, bait) {\n    try {\n      prevPos.forEach((pre) => this.set(pre, 0))\n      curPos.forEach((cur) => this.set(cur, -1))\n    } catch {\n      return -1\n    }\n    let positionsCopy = [...curPos]\n    for (let i = 0; i < positionsCopy.length; i++) {\n      let curPiece = positionsCopy[i]\n      positionsCopy.splice(i, 1)\n      let rest = positionsCopy\n      // runs into itself\n\n      for (let o = 0; o < rest.length; o++) {\n        let other = rest[o]\n\n        if (curPiece.equals(other)) {\n          return -1\n        }\n      }\n      // out of bounds\n      if (\n        curPiece.x >= this.ctx.cols ||\n        curPiece.x < 0 ||\n        curPiece.y >= this.ctx.rows ||\n        curPiece.y < 0\n      )\n        return -1\n      // finds bait\n      if (curPiece.equals(bait)) {\n        return 1\n      }\n      return 0\n    }\n  }\n\n  render(){\n    let {scl, p, elements, sightSize} = this.ctx\n    // update game score and life information\n    elements.score.html(`Score: ${this.score}`)\n    elements.life.html(`Life: ${this.snake.life}`)\n    if(this.gameOver) {\n      p.noLoop()\n      return\n    }\n    p.background(100)\n    let snakePos = this.snake.positions\n    let applePos = this.baitLocation\n\n    // draw what the snake is looking at\n    p.push()\n    let start = Math.floor(sightSize/2) * -1\n    let end = Math.floor(sightSize/2)\n    p.noStroke()\n    p.fill(120)\n    for(let x = start; x <= end; x++) {\n      for(let y = start; y <= end; y++) {\n        let v = p.createVector(x,y)\n        let pos = p5.Vector.add(v, this.snake.headPos)\n        p.rect(pos.x * scl, pos.y * scl, scl, scl)\n      }\n    }\n    p.pop()\n\n    // draw where the snake is\n    p.push()\n    p.noStroke()\n    snakePos.forEach((pos, i) => {\n      i === 0 ? p.fill(0) : p.fill(40)\n      p.rect(pos.x * scl, pos.y * scl, scl, scl)\n\n    })\n    p.pop()\n\n    // draw the apple\n    p.push()\n    p.noStroke()\n    p.fill(255, 0, 0)\n    p.rect(applePos.x * scl, applePos.y * scl, scl, scl)\n    p.pop()\n  }\n}"]}