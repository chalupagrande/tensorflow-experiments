{"version":3,"sources":["snake2/gameInstance.js"],"names":["GameInstance","constructor","elements","this","ctx","playState","sketch","p","setup","draw","bind","snake","Snake","addBrain","Brain","Game","game","addSnake","newBait","look","s","loop","setPlayState","noLoop","setPlayerMode","keyPressed","LEFT_ARROW","setHeading","keyCode","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","globalParentDiv","container","child","score","createSpan","life","select","w","h","createDiv","canvas","class","frameRate","fps"],"mappings":"AAEE,MAAAA,aAWEC,YAAKC,GACLC,KAAKC,SAAL,GACAD,KAAKE,IAAAA,EACLF,KAAKG,UAAS,OACZC,KAAEC,OAAQ,IAAKA,GAALD,IACVA,EAAEE,MAAON,KAAKM,MAAKC,KAAKP,KAAxBI,GAFFA,EAAAE,KAAAN,KAAAM,KAAAC,KAAAP,KAAAI,KAIwBA,KAAGI,MAAKL,IAATM,MAAA,CAAAL,EAAAJ,KAAAG,UAAAF,EAAAF,SAAAC,KAAAD,WAAiBC,KAAGC,MAApBS,SAAA,IAAAC,MAAAX,KAAAC,MAAyBF,KAAAA,KAAU,IAAAa,KAAKb,CAAAA,EAAAA,KAAAA,UAAAA,EAAAA,SAAAA,KAAAA,WAAxCC,KAAvBa,KAAAC,SAAAd,KAAAQ,OACAR,KAAKQ,KAALO,UACAf,KAAKa,MAALG,OAA8CjB,aAAQkB,GACtD,OADqBjB,KAArBE,UAAAe,EACKJ,KAAKC,WACV,IAAKD,OACLb,KAAKQ,OAALU,OACD,MAQG,IAAK,QANTC,KAAAA,OAAeC,SACb,MAQE,QAPFpB,KAAOG,OAAKD,QAYdmB,gBARIrB,KAAAG,OAAKmB,WAAL,KACEtB,KAAKG,OAAOiB,UAAZpB,KAAAG,OAAAoB,WACAvB,KAAAQ,MAAAgB,YAAA,EAAA,GAUSxB,KAAKG,OAAOsB,UAAYzB,KAAKG,OAAOuB,YAT/C1B,KAAAQ,MAAAgB,WAAA,EAAA,GACOrB,KAAOe,OAAZO,UAAAzB,KAAAG,OAAAwB,SARJ3B,KAAAQ,MAAAgB,WAAA,GAAA,GAUDxB,KAAAG,OAAAsB,UAAAzB,KAAAG,OAAAyB,YAWK5B,KAAKQ,MAAMgB,WAAW,EAAE,IALzBnB,MAFDD,GAGE,IAAAyB,EAAWL,EAAAA,OAAX,oBADKM,EAEI1B,EAAKD,YACd2B,EAAKtB,MAAMgB,QACZK,EAAUE,MAAK5B,GACd,IAAA6B,EAAKxB,EAALyB,WAAsB,WAAtBjC,KAAAa,KAAAmB,OAAA,OACDE,EAAA9B,EAAA6B,WAAA,UAAAjC,KAAAQ,MAAA0B,MAAA,OACFlC,KAVDD,SAAAiC,MAAAA,EAWDhC,KAAAD,SAAAmC,KAAAA,EAWCJ,EAAUC,MAAMC,GATlB3B,EAAQ0B,MAAAG,GACNlC,KAAI6B,SAAAA,OAAmBzB,EAAC+B,aAAOnC,KAAAC,IAAAmC,EAA/BpC,KAAAC,IAAAoC,GACAP,EAAIA,MAAY1B,KAAEkC,SAAlBC,QACAT,KAAAA,SAAUU,UAAVV,EAGAxB,KAAAF,GACAA,EAAAqC,UAAK1C,KAASiC,IAAdU,KACA1C,KAAKD,KAAAA,SACL+B,KAAAA,KAAUC","file":"../../snake2/gameInstance.min.js","sourcesContent":["\nclass GameInstance {\n  /**\n   * @param {object} ctx - {\n   *                          p5: p5 instance\n   *                          w: width in pixels of canvas\n   *                          h: height in pixels of canvas\n   *                          rows: height in tiles for the gameboard\n   *                          cols: width in tiles for the gameboard\n   *                          fps: frames per sec of game\n   *                         }\n   */\n  constructor(ctx) {\n    this.elements = {}\n    this.ctx = ctx\n    this.playState = 'play'\n    this.sketch = new p5((p) => {\n      p.setup = this.setup.bind(this, p)\n      p.draw = this.draw.bind(this, p)\n    })\n    this.snake = new Snake({p: this.sketch, ...ctx, elements: this.elements})\n    this.snake.addBrain(new Brain(this.ctx))\n    this.game = new Game({p: this.sketch, ...ctx, elements: this.elements})\n    this.game.addSnake(this.snake)\n    this.game.newBait()\n    this.snake.look()\n  }\n\n  setPlayState(s){\n    this.playState = s\n    switch(this.playState) {\n      case 'play':\n        this.sketch.loop()\n        break;\n      case 'pause':\n        this.sketch.noLoop()\n        break;\n      default:\n        this.sketch.loop()\n    }\n  }\n\n  setPlayerMode(){\n    this.sketch.keyPressed = ()=>{\n      if (this.sketch.keyCode === this.sketch.LEFT_ARROW) {\n        this.snake.setHeading(-1,0)\n      } else if (this.sketch.keyCode === this.sketch.RIGHT_ARROW) {\n        this.snake.setHeading(1,0)\n      } else if (this.sketch.keyCode === this.sketch.UP_ARROW) {\n        this.snake.setHeading(0,-1)\n      } else if (this.sketch.keyCode === this.sketch.DOWN_ARROW) {\n        this.snake.setHeading(0,1)\n      }\n    }\n  }\n\n  setup(p){\n    let globalParentDiv = p.select('#globalParentDiv')\n    let container = p.createDiv()\n    container.class('game')\n    globalParentDiv.child(container)\n    let score = p.createSpan(`Score: ${this.game.score || 'NA'}`)\n    let life = p.createSpan(`Life: ${this.snake.life || 'NA'}`)\n    this.elements.score = score\n    this.elements.life = life\n    container.child(score)\n    container.child(life)\n    this.elements.canvas = p.createCanvas(this.ctx.w, this.ctx.h)\n    container.child(this.elements.canvas)\n    this.elements.container = container\n  }\n\n  draw(p){\n    p.frameRate(this.ctx.fps)\n    this.game.render()\n    this.game.step()\n  }\n}"]}