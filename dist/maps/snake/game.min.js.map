{"version":3,"sources":["snake/game.js"],"names":["Game","constructor","sketch","boardWidth","boardHeight","this","opts","baitLocation","row","col","Array","map","board","push","snake","newBait","set","pos","val","x","y","get","addSnake","forEach","curVal","Math","floor","random","createVector","step","oldPositions","newPositions","move","status","updateBoard","grow","prevPos","curPos","bait","pre","cur","i","positionsCopy","length","curPiece","splice","rest","o","equals"],"mappings":"AAAA,MAAMA,KACJC,YAAYC,EAAQC,EAAYC,GAC9BC,KAAKH,OAASA,EACdG,KAAKC,KAAO,CAAAH,WAAAA,EAAAC,YAAAA,GAAED,KAAAA,MAAF,GAAcC,KAAAA,aAAAA,KAE1B,IAAKG,IAAAA,EAAAA,EAALC,EAAAL,EAEAK,IAAA,CAEE,IAAIC,EAAM,IAAIC,MAAMN,IAAcO,IAAI,IAAM,GAD9CN,KAAKO,MAAOC,KAAML,GAGjBH,KAAAS,MAAA,KAGDT,KAAKU,UADLV,KAAKS,MAAQ,EAGdE,IAAAC,EAAAC,GAGCb,KAAKO,MAAMK,EAAIE,GAAGF,EAAIG,GAAKF,EAC5BG,IAAAJ,GAGC,OAAOZ,KAAKO,MAAMK,EAAIE,GAAGF,EAAIG,GAC9BE,SAAAR,GAGCT,KAAKS,MAAQA,EADfQ,KAAAA,MAASR,UAAOS,QAAAN,GAAAZ,KAAAW,IAAAC,GAAA,IAGfF,UAGC,IADFA,EACMS,GAAU,EAAd,MAAA,IAAIA,GAAJ,IAAAA,GAAA,CACA,IAAIP,EAAJQ,KAAAC,MAAArB,KAAAH,OAAAyB,OAAAtB,KAAAC,KAAAH,aAGMiB,EAAIK,KAAKC,MAAMrB,KAAKH,OAAOyB,OAAOtB,KAAKC,KAAKF,cAFlDa,EAAOO,KAAMtB,OAAN0B,aAAuBT,EAA9BC,GACEI,EAAQC,KAAKC,IAALT,GAERA,KAAGV,aAAeqB,EAClBJ,KAAAA,IAAMP,EAAG,GAEXY,OACA,IAAAC,aAAKd,EAALe,aAAAA,GAAA1B,KAAAS,MAAAkB,OAMIC,EAAS5B,KAAK6B,YAHhBJ,EACFC,EAAMD,KAAAA,cAQJ,OAR8CE,IAAXC,IAErC5B,KAAI4B,MAASE,OAOX9B,KAAKU,WADAD,EAMToB,YAAYE,EAASC,EAAQC,GAH3B,IACDF,EAAAb,QAAAgB,GAAAlC,KAAAW,IAAAuB,EAAA,IAKGF,EAAOd,QAASiB,GAAQnC,KAAKW,IAAIwB,GAAM,IAH3CN,MACE,OAAI,EAEFG,IAAAA,EAAe,IAASA,GACzB,IAAC,IAAMI,EAAA,EAAAA,EAAAC,EAAAC,OAAAF,IAAA,CACN,IAAAG,EAAAF,EAAAD,GACDC,EAAAG,OAAAJ,EAAA,GAKC,IAAIK,EAAOJ,EAHb,IAAK,IAAKK,EAAV,EAAiBA,EAAGL,EAAAA,OAAcC,IAAlC,CACE,IAAIC,EAAQE,EAAGJ,GAEf,GAAII,EAAOJ,OAAAA,GAOP,OAAQ,EADV,OACEE,EAAOzB,GAAPd,KAAAC,KAAAH,YACDyC,EAAAzB,EAAA,GAEHyB,EAAAxB,GAAAf,KAAAC,KAAAF,aAKEwC,EAASxB,EAAI,GAHbwB,EAOEA,EAASI,OAAOV,GACX,EAEF","file":"../../snake/game.min.js","sourcesContent":["class Game {\n  constructor(sketch, boardWidth, boardHeight) {\n    this.sketch = sketch\n    this.opts = { boardWidth, boardHeight }\n    this.board = []\n    this.baitLocation = null\n\n    // init board\n    for (let row = 0; row < boardWidth; row++) {\n      let col = [...Array(boardHeight)].map(() => 0)\n      this.board.push(col)\n    }\n\n    this.snake = null\n    this.newBait()\n    this.score = 1\n  }\n\n  set(pos, val) {\n    this.board[pos.x][pos.y] = val\n  }\n\n  get(pos) {\n    return this.board[pos.x][pos.y]\n  }\n\n  addSnake(snake) {\n    this.snake = snake\n    this.snake.positions.forEach((pos) => this.set(pos, -1))\n  }\n\n  newBait() {\n    let curVal = -1\n    let pos\n    while (curVal === -1 || curVal === 1) {\n      let x = Math.floor(this.sketch.random(this.opts.boardWidth))\n      let y = Math.floor(this.sketch.random(this.opts.boardHeight))\n      pos = this.sketch.createVector(x, y)\n      curVal = this.get(pos)\n    }\n    this.baitLocation = pos\n    this.set(pos, 1)\n  }\n\n  step() {\n    let { oldPositions, newPositions } = this.snake.move()\n\n    let status = this.updateBoard(\n      oldPositions,\n      newPositions,\n      this.baitLocation\n    )\n    if (status === 1) {\n      this.snake.grow()\n      this.newBait()\n    }\n    return status\n  }\n\n  updateBoard(prevPos, curPos, bait) {\n    try {\n      prevPos.forEach((pre) => this.set(pre, 0))\n      curPos.forEach((cur) => this.set(cur, -1))\n    } catch {\n      return -1\n    }\n    let positionsCopy = [...curPos]\n    for (let i = 0; i < positionsCopy.length; i++) {\n      let curPiece = positionsCopy[i]\n      positionsCopy.splice(i, 1)\n      let rest = positionsCopy\n      // runs into itself\n\n      for (let o = 0; o < rest.length; o++) {\n        let other = rest[o]\n\n        if (curPiece.equals(other)) {\n          return -1\n        }\n      }\n      // out of bounds\n      if (\n        curPiece.x >= this.opts.boardWidth ||\n        curPiece.x < 0 ||\n        curPiece.y >= this.opts.boardHeight ||\n        curPiece.y < 0\n      )\n        return -1\n      // finds bait\n      if (curPiece.equals(bait)) {\n        return 1\n      }\n      return 0\n    }\n  }\n}"]}